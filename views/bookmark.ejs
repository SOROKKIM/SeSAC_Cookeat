<!DOCTYPE html>
<html lang="ko">
    <head>
        <meta charset="UTF-8" />
        <%- include('nav.ejs') %> <%- include('footer.ejs') %>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
<<<<<<< HEAD
        <meta
            name="description"
            content="유저가 저장한 bookmark를 보기 위한 페이지로, 
        Axios를 통한 API 호출, jQuery 돔 조작, 로컬 스토리지 사용, 북마크 삭제 기능이 있다."
        />
=======
        <meta property="og:type" content="website" />
        <meta property="og:url" content="http://localhost:8080/" />
        <meta property="og:title" content="Cook! Eat!" />
        <meta property="og:image" content="/static/free-icon-fried-egg.png" />
        <meta property="og:description" content="나만의 레시피를 자랑해보세요!" />
        <meta property="og:site_name" content="Cook Eat" />
        <!-- 다음의 태그는 필수는 아니지만, 포함하는 것을 추천함 -->
        <meta property="og:image:width" content="1200" />
        <meta property="og:image:height" content="630" />
>>>>>>> develop
        <link rel="stylesheet" href="/static/follow.css" />
        <link
            rel="stylesheet"
            href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200"
        />
        <title>북마크</title>
    </head>

    <body>
        <!-- <h1>북마크</h1> -->
        <div class="container">
            <h1>Bookmarks</h1>

            <!-- 북마크 정보를 표시할 영역 -->
            <div id="bookmarkContainer" class="followerContainer">
                <!-- 맨 윗줄에는 NAME과 RECIPE라는 글씨가 고정적으로 나타나게 함 -->
                <div class="singleFollow">
                    <div class="userData">
                        <div class="userId">NAME</div>
                        <div class="userName">RECIPE</div>
                        <div></div>
                    </div>
                </div>
            </div>

            <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
            <script>
                $(document).ready(function () {
                    // 사용자의 토큰을 로컬 스토리지에서 가져옵니다.
                    const token = localStorage.getItem("user");

                    // 토큰이 없는 경우 로그인 페이지로 이동 또는 다른 처리를 하실 수 있습니다.
                    if (!token) {
                        console.error("Token not found. Please log in.");
                        return;
                    }

                    // 사용자의 ID를 로컬 스토리지에서 가져옵니다.
                    const userId = localStorage.getItem("userId");

                    // 서버에서 제공하는 API 주소를 사용하고, 토큰을 헤더에 포함시켜 요청합니다.
                    axios
                        .get(`/profile/${userId}/bookmarks`, {
                            headers: {
                                Authorization: `Bearer ${token}`,
                            },
                        })
                        .then(async (response) => {
                            console.log(response.data); // 확인용 콘솔 출력

                            const bookmarks = response.data;

                            // 북마크 정보를 표시할 컨테이너 요소
                            const bookmarkContainer = $("#bookmarkContainer");
                            if (bookmarks && bookmarks.length > 0) {
                                // 받아온 북마크 정보를 동적으로 HTML에 추가
                                bookmarks.forEach(async (bookmark) => {
                                    try {
                                        const postResponse = await axios.get(
                                            `/post/${bookmark.postId}`
                                        );
                                        const postDetail = postResponse.data;
                                        // console.log("포디데이터", postDetail);

                                        // singleFollow
                                        const singleFollow = $("<div>").addClass("singleFollow");

                                        // userData
                                        const userData = $("<div>").addClass("userData");

                                        // 북마크 삭제 아이콘
                                        const bookmarkIcon = document.createElement("span");
                                        bookmarkIcon.textContent = "bookmark";
                                        bookmarkIcon.classList.add("material-symbols-outlined");
                                        bookmarkIcon.classList.add("bookmarkIcon");

                                        // Append NAME and RECIPE dynamically
                                        userData.append(`
                                        <div class="userId">${bookmark.authorName}</div>
                                        <div class="userName">
                                            <a href="/post/${bookmark.postId}">${bookmark.title}</a>
                                        </div>
                                    `);

                                        // 북마크 삭제 아이콘을 userData에 추가
                                        userData.append(bookmarkIcon);

                                        singleFollow.append(userData);

                                        bookmarkContainer.append(singleFollow);

                                        // 클릭 이벤트 처리
                                        $(bookmarkIcon).on("click", function () {
                                            const bookmarkDeleteCheck = confirm(
                                                `${bookmark.title} 북마크를 목록에서 삭제하시겠습니까?`
                                            );

                                            if (bookmarkDeleteCheck) {
                                                // axios를 사용하여 북마크 삭제 요청
                                                axios({
                                                    url: `/bookmarkDelete/${bookmark.postId}`,
                                                    method: "delete",
                                                    headers: {
                                                        Authorization: `Bearer ${token}`,
                                                    },
                                                })
                                                    .then((res) => {
                                                        console.log(res.data);
                                                        alert(res.data.msg);
                                                        location.reload(); // 페이지 새로고침
                                                    })
                                                    .catch((err) => {
                                                        alert("오류 발생");
                                                        console.log("err>>", err);
                                                    });
                                            }
                                        });
                                    } catch (postError) {
                                        console.error("포스트 조회 중 에러:", postError);
                                    }
                                });
                            } else {
                                const userData = document.createElement("div");
                                userData.classList.add("userData");
                                userData.classList.add("notFound");
                                userData.textContent = "There are no bookmarks";
                                const singleFollow = document.createElement("div");
                                singleFollow.classList.add("singleFollow");
                                singleFollow.appendChild(userData);
                                bookmarkContainer.append(singleFollow);
                            }
                        })
                        .catch((error) => {
                            console.error("북마크 조회 중 에러:", error);
                        });
                });
            </script>
        </div>
    </body>
</html>
